{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kevin/OneDrive/Documents/GitHub/MaclellanFamily.com2/maclellanfamily/app/api/s3/%5Byear%5D/%5Btime%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { ListObjectsV2Command, S3Client, GetObjectCommand } from '@aws-sdk/client-s3';\r\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\r\nimport { getAuth } from 'firebase-admin/auth';\r\nimport { getFirestore } from 'firebase-admin/firestore';\r\nimport { initializeApp, getApps, cert } from 'firebase-admin/app';\r\n\r\n// Initialize Firebase Admin SDK\r\nif (!getApps().length) {\r\n  try {\r\n    initializeApp({\r\n      credential: cert({\r\n        projectId: process.env.FIREBASE_PROJECT_ID,\r\n        clientEmail: process.env.FIREBASE_ADMIN_CLIENT_EMAIL,\r\n        privateKey: process.env.FIREBASE_ADMIN_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\r\n      }),\r\n    });\r\n  } catch (error) {\r\n    console.error('Firebase Admin initialization error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Initialize S3 Client\r\nconst s3Client = new S3Client({\r\n  region: process.env.AWS_S3_REGION || 'us-east-2',\r\n  credentials: {\r\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID || '',\r\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || '',\r\n  },\r\n} as const);\r\n\r\ntype RouteParams = {\r\n  params: {\r\n    year: string;\r\n    time: string;\r\n  };\r\n};\r\n\r\n// Explicitly type the route handler according to Next.js expectations\r\nexport async function GET(request: NextRequest, props: RouteParams) {\r\n  try {\r\n    const { year, time } = props.params;\r\n    \r\n    // Check authorization header\r\n    const authHeader = request.headers.get('authorization');\r\n    if (!authHeader?.startsWith('Bearer ')) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const token = authHeader.split('Bearer ')[1];\r\n    const decodedToken = await getAuth().verifyIdToken(token);\r\n    const userId = decodedToken.uid;\r\n\r\n    // Fetch user document from Firestore\r\n    const db = getFirestore();\r\n    const userDoc = await db.collection('users').doc(userId).get();\r\n    if (!userDoc.exists) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n    const folderPath = userDoc.data()?.folderPath || '';\r\n\r\n    // Define S3 prefix for the time period\r\n    const timePrefix = `${process.env.AWS_BASE_FOLDER}${folderPath}/${year}/${time}/`;\r\n    console.log('Time-specific S3 prefix:', timePrefix);\r\n\r\n    // Rest of your code remains the same...\r\n    const command = new ListObjectsV2Command({\r\n      Bucket: process.env.AWS_S3_BUCKET,\r\n      Prefix: timePrefix,\r\n    });\r\n\r\n    const response = await s3Client.send(command);\r\n\r\n    const images = await Promise.all(\r\n      (response.Contents || [])\r\n        .filter(item => item.Key?.toLowerCase().match(/\\.(jpg|jpeg|png|gif)$/i))\r\n        .map(async (item) => {\r\n          const getObjectCommand = new GetObjectCommand({\r\n            Bucket: process.env.AWS_S3_BUCKET,\r\n            Key: item.Key,\r\n          });\r\n\r\n          const signedUrl = await getSignedUrl(s3Client, getObjectCommand, {\r\n            expiresIn: 3600,\r\n          });\r\n\r\n          return {\r\n            key: item.Key,\r\n            url: signedUrl,\r\n            lastModified: item.LastModified,\r\n          };\r\n        })\r\n    );\r\n\r\n    const sortedImages = images.sort((a, b) =>\r\n      (b.lastModified?.getTime() || 0) - (a.lastModified?.getTime() || 0)\r\n    );\r\n\r\n    return NextResponse.json({\r\n      images: sortedImages,\r\n      prefix: timePrefix,\r\n    });\r\n  } catch (error) {\r\n    console.error('Detailed error:', error);\r\n    if (error instanceof Error) {\r\n      console.error({\r\n        name: error.name,\r\n        message: error.message,\r\n        stack: error.stack,\r\n        cause: error.cause,\r\n      });\r\n    }\r\n    return NextResponse.json(\r\n      { error: 'Internal Server Error', details: error instanceof Error ? error.message : 'Unknown error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kevin/OneDrive/Documents/GitHub/MaclellanFamily.com2/maclellanfamily/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":";;;;;;;AAAA,SACEA,mBAAmB,QAEd,uDAAsD;AAC7D,SAASC,SAAS,QAAQ,0BAAyB;AACnD,SAASC,cAAcC,WAAW,QAAQ,+BAA8B;AAExE,YAAYC,cAAc,eAAc;;;;;;;;;AAOxC,2EAA2E;AAC3E,UAAU;AACV,MAAA,mBAAA,CAA0B;AAE1B,MAAMC,cAAc,8MAAIL,sBAAAA,CAAoB;IAC1CM,YAAY;QACVC,MAAMN,6KAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACVC,UAAU;QACVC,YAAY;IACd;IACAC,kBAAkB;IAClBC;cACAV;AACF;AAEA,2EAA2E;AAC3E,2EAA2E;AAC3E,mCAAmC;AACnC,MAAM,EAAEW,gBAAgB,EAAEC,oBAAoB,EAAEC,WAAW,EAAE,GAAGZ;AAEhE,SAASH;IACP,oLAAOC,aAAAA,EAAY;QACjBY;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}